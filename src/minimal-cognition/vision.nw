\section{Vision}
%\epigraph{I don't calculate for numbers; I calculate for insight.}{(I wish I knew.)}
\epigraph{The purpose of computing is insight, not numbers.}{Richard Hamming}

The agents in Beer's work have vision sensors that detect the distance
of an object.  This code implements a vision detector in 2D for
circles.  The principal file is [[vision.scm]], which includes some
modules and defines some procedures.\footnote{Style note: I use the
  singular ``Procedure'' rather than ``Procedures'' as the chunk
  name because it is reused repeatedly to define each procedure.}

<<file:vision.scm>>=
(define-module (minimal-cognition vision)
  #:use-module (vector-math)
  #:use-module (infix)
  #:use-module (ice-9 optargs)
  #:use-module (minimal-cognition fode)
  #:use-module (minimal-cognition ctrnn)
  #:use-module (minimal-cognition unified-procedure)
  #:use-module (system foreign)
  #:use-module (rnrs bytevectors)
  #:export (vision-input-pointer
            make-c-vision-context
            )
  )

;; This is erroneously reported as a "file not found" error when
;; there is a symbol missing. Ugh.
(load-extension "libguile-vision" "init_vision")


<<Procedure>>
@ 

\subsection{I was blind, but calculation let me see} 

Mathematically, the problem is relatively simple.  Given a point of
origin for the ``eye'' $(x_1, y_1)$ and its angle $\theta$ with
respect to the $x$-axis, find its intersection with a circle of radius
$r$ centered at $(x_2, y_2)$.

\begin{figure}[H]
  \centering
  \includegraphics[width=0.5\textwidth]{vision-problem} 
  \caption[Short Label]{\label{vision-problem}General problem.}
\end{figure}


Let's solve our easier reformulated problem first.  This will have as
inputs $(x_2', y_2')$, radius $r$, and we'll assume the origin $(x_1,
y_1) = (0, 0)$.

\begin{figure}[H]
  \centering
  \includegraphics[width=0.5\textwidth]{vision-problem-reform} 
  \caption[Short Label]{\label{vision-problem-reform}General problem
    reformulated to a specific problem.}
\end{figure}
 
<<Procedure>>=
(define (intersection-with-circle* x2* y2* r)
  (if (or (< x2* 0) (> (abs y2*) r))
      ;; We're not touching the circle.
      'no-intersection
      (let ((a <<Solve for $a$.>>))
        (- x2* a))))
@ 

All we have to do is solve for $a$ in our diagram in
\cref{vision-problem-reform}.

\begin{align}
  r^2 &= y_2'^2 + a^2 \\
  a^2 &= r^2 - y_2'^2 \\
  a &= \sqrt{r^2 - y_2'^2}
\end{align}

<<Solve for $a$.>>=
  (sqrt (- (* r r) (* y2* y2*)))
@

Now, let's solve the more general problem shown in
\cref{vision-problem}.  First, we need to convert the general problem
into the specific problem.

\begin{align}
  (x_2', y_2') &= R\ ((x_2, y_2) - (x_1, y_2)) \\
  R &= \begin{bmatrix}
       cos(\theta) & sin(\theta) \\
       -sin(\theta) & cos(\theta) \\
       \end{bmatrix}
\end{align}

Then we find the point of intersection using the specific problem
solution $(x_3', y_3')$, we convert it back to the general problem
solution $(x_3, y_3)$.

\begin{align}
  (x_3, y_3) = R^T\ (x_3', y_3') + (x_1, y_2)
\end{align}

The procedure [[intersection-with-circle]] solves the general problem.

<<Procedure>>=
(define-public (intersection-with-circle x1 y1 theta x2 y2 r)
  (let* ((p1 (vector x1 y1))
         (p2 (vector x2 y2))
         (R <<Make a rotation matrix.>>)
         (p2* (matrix. R (vector- p2 p1)))
         (x3 (intersection-with-circle* (: p2* @ 0) (: p2* @ 1) r))
         (p3 (vector x3 0)))
    (if (eq? x3 'no-intersection)
        'no-intersection
        (vector+ (matrix. (matrix-transpose R) p3) p1))))
@ 
  
<<Make a rotation matrix.>>=
(let ((s (sin theta))
      (c (cos theta)))
 `#(#(,c ,s)
    #(,(- s) ,c)))
@

Now let's test it out on the simplest case.

<<test>>=
(define x1 0)
(define y1 0)
(define x2 2)
(define y2 0)
(define theta 0)
(define r 1)

(check (intersection-with-circle* x2 y2 r) (=> fe:=?) 1)
(check (intersection-with-circle x1 y1 theta x2 y2 r) (=> fe:=?) #(1 0))
@ 

If we shift all positions over by 1 in the $x$ direction, it shouldn't matter.

<<test>>=
(incr! x1)
(incr! x2)

(check (intersection-with-circle x1 y1 theta x2 y2 r) (=> fe:=?) #(2 0))
@ 

Likewise for $y$.

<<test>>=
(incr! y1)
(incr! y2)

(check (intersection-with-circle x1 y1 theta x2 y2 r) (=> fe:=?) #(2 1))
@ 

Great. Now, let's reset everything and try changing $\theta$.

<<test>>=
(set! x1 0)
(set! y1 0)
(set! x2 2)
(set! y2 0)
(set! theta (/ pi 2))
(set! r 1)

(check (intersection-with-circle x1 y1 theta x2 y2 r) => 'no-intersection)
@ 

Let's set $\theta$ back to 0, and we'll confirm that the position of
intersection changes relatively the way we expect.  This also affirms
that I have not defined my rotation matrix such that $\theta$ actually
representes $-\theta$.

<<test>>=
(set! theta 0)
(check (intersection-with-circle x1 y1 theta x2 y2 r) (=> fe:=?) #(1 0))
(set! theta 0.1)
(define up-right (intersection-with-circle x1 y1 theta x2 y2 r))
(set! theta -0.1)
(define down-right (intersection-with-circle x1 y1 theta x2 y2 r))
;; Check the y's.
(check-true (: up-right @ 1 > 0))
(check-true (: down-right @ 1 < 0))
;; Check the x's.
(check-true (: up-right @ 0 > 1))
(check-true (: down-right @ 0 > 1))
@ 

\subsection{Calculations will let you see}


Now we want to implement a sight function that we can feed to our
CTRNN.  The input function to the CTRNN accepts a time and an index
parameter [[(input t i)]].  However, to construct our sight input, we
have to know and choose a number of things: the positions of the agent
and objects, the number of sensors, where the sensors are placed, and
what direction they face, the maximum range of the sensors, and the
agent diameter.

For the sake of simplicity let's assume all sensors are placed in a
bilaterally symmetric way with uniform radial spacing.  Thus, the
parameters we need to define are the total angle of vision $\Theta$,
and the number of objects $m$, number of sensors $n$, agent diameter
$d$, object radius $r$, and max distance $D$.

The $\theta_i$ is the angle with respect to the $x$-axis for sensor
$i$.  Since they're uniformed spaced, $\theta_{i + 1} = \theta_i +
\Delta_\theta$ or $\theta_i = i \Delta_\theta + \theta_0$.

<<Procedure>>=
(define*-public (make-vision-input ty m n d r D Theta max-output
                #:optional (sight-listener #f))
  (let* ((theta_1 <<Find $\theta_1$.>>)
         (delta_theta (- (/ Theta (1- n)))))
    (define (unit-vector-for-sensor i)
      (let* ((theta (- (+ (* i delta_theta) theta_1)))
             (R <<Make a rotation matrix.>>))
        (matrix. R (vector 1. 0.))))
    (define (distance-for-object i j) ;; sensor i, object j
      <<Compute distance between sensor i and object j.>>)
    (lambda (t i)
      (if (>= i n)
          ;; Return zero to non-sensor nodes.
          0.
          ;; Return the smallest distance remapping from [0, D] -> [0, max-output]
          (let* ((distance (apply min (map (lambda (j) (distance-for-object i j))
                                           (range 1  m)) ;; 1 based index for objects.
                                  ))
                 (output (* (/ max-output D) distance)))
            #;(format #t "distance ~a for sensor ~a~%" distance i)
            #;(for-each (lambda (i)
                        (let  ((position (vector (object-x ty i) 
                                                 (object-y ty i) 
                                                 0)))
                          (format #t "sensor object ~a at position ~a~%" i position))
                        ) (range 1 2))
            (if sight-listener
                (sight-listener 
                 (vector
                  (: ty @ 1) ;; agent x
                  (: ty @ 2) ;; agent y 
                  )
                 (vector+ 
                  (vector
                   (: ty @ 1) ;; agent x
                   (: ty @ 2) ;; agent y 
                   )
                  (vector* distance (unit-vector-for-sensor i)))
                 ))
            output)))))
@ 

<<Compute distance between sensor i and object j.>>=
(let* ((theta_i (+ (* i delta_theta) theta_1))
       (point (intersection-with-circle
               (object-x ty 0) ;; agent x
               (object-y ty 0) ;; agent y
               theta_i
               (object-x ty j) ;; object x
               (object-y ty j) ;; object y
               r)))
  (if (eq? point 'no-intersection)
      D
      (min D (- (vector-norm (vector- point (vector
                                             (object-x ty 0) ;; agent x
                                             (object-y ty 0) ;; agent y
                                             )))
                (/ d 2))
           )))
@ 

<<Find $\theta_1$.>>=
(+ (/ Theta 2) (/ pi 2))
@ 

Great, now let's basically do the same tests but with this new form.

<<test>>=
(define t 0.)
(set! x1 0)
(set! y1 0)
(set! x2 5)
(set! y2 0)
(define x3 -4)
(define y3 0)

(define ty (vector t x1 y1 x2 y2 x3 y3))
(define m 2) ;; objects
(define n 3) ;; sensors
(define Theta pi) ;; field of view
(define d 2) ;; diameter of agent
(set!   r 1) ;; radius of objects
(define D 10) ;; max sight distance

;; We may want to test against the C function instead.
(when (and (get-environment-variable "USE_C_VISION_INPUT") 
           (string=? "1" (get-environment-variable "USE_C_VISION_INPUT")))
 (format #t "Using c-vision-input.~%")
 #;(set! make-vision-input make-c-vision-input)
 (set! make-vision-input make-c-vision-input-unified)
)

(define vision-input (make-vision-input ty m n d r D Theta D))
(check (vision-input t 0) (=> fe:=?) 2)
(check (vision-input t 1) (=> fe:=?) D)
(check (vision-input t 2) (=> fe:=?) 3)
(check (vision-input t 4) (=> fe:=?) 0)

(set! d 0) ;; diameter of agent
(set! vision-input (make-vision-input ty m n d r D Theta D))
(check (vision-input t 0) (=> fe:=?) 3)
(check (vision-input t 1) (=> fe:=?) D)
(check (vision-input t 2) (=> fe:=?) 4)
(check (vision-input t 4) (=> fe:=?) 0)

(set! n 5)
(set! x2 1)
(set! y2 1)
(set! x3 -4)
(set! y3 0)

(set! ty (vector t x1 y1 x2 y2 x3 y3))
(set! vision-input (make-vision-input ty m n d r D Theta D))
(check (vision-input t 0) (=> fe:=?) 3)
(check (vision-input t 1) (=> fe:=?) 10)
(check (vision-input t 2) (=> fe:=?) 1)
(check (vision-input t 3) (=> fe:=?) (1- (sqrt 2)))
(check (vision-input t 4) (=> fe:=?) 1)
(check (vision-input t 5) (=> fe:=?) 0)

;; Change the agent position.
(set! x1 -0.5)

(set! ty (vector t x1 y1 x2 y2 x3 y3))
(set! vision-input (make-vision-input ty m n d r D Theta D))
(check (vision-input t 0) (=> fe:=?) 2.5)
(check (vision-input t 1) (=> fe:=?) 10)
(check (vision-input t 2) (=> fe:=?) 10)
;(check (vision-input t 3) (=> fe:=?) (1- (sqrt 2)))
(check (vision-input t 4) (=> fe:=?) 1.5)
(check (vision-input t 5) (=> fe:=?) 0)
(set! x1 0)

(set! r 0.5) ;; radius of objects
(set! ty (vector t x1 y1 x2 y2 x3 y3))
(set! vision-input (make-vision-input ty m n d r D Theta D))
(check (vision-input t 0) (=> fe:=?) 3.5)
(check (vision-input t 1) (=> fe:=?) 10)
(check (vision-input t 2) (=> fe:=?) 10)
(check (vision-input t 3) (=> fe:=?) (+ (1- (sqrt 2)) 0.5))
(check (vision-input t 4) (=> fe:=?) 10)
(check (vision-input t 5) (=> fe:=?) 0)
@ 

\subsection{Again, but in C}

The above works; however, it's not fast enough. So we're going to
rewrite it in C.

<<file:vision.h>>=
#ifndef _VISION_H_
#define _VISION_H_
#include <libguile.h>
#include "ctrnn.h"

<<ctrnn:Include GSL headers.>>
<<Structure>>
<<Macro>>

void setup_vision_args(struct vision_args *args);
void teardown_vision_args(struct vision_args *args);

int vision_input (double t, int i, void *context, double *output);
void call_scm_sight_listener_func(double x1, double y1, double x2, double y2, struct vision_args* vargs);
void init_vision(void);
#endif /* _VISION_H_ */
@ 

<<file:vision.c>>=
#include <libguile.h>
#ifndef SCM_MAGIC_SNARFER 
#include "vision.h"
#include "math.h"
#include <assert.h>
#endif 
int intersection_with_circle(double x1, double y1, 
                             gsl_matrix * R, 
                             double x2, double y2, 
                             double r, 
                             double  *x3, double *y3);
<<Function>>
<<Initialize>>
@ 

Well, rewriting isn\'t fun, but this is an inner loop where we do need
the speed.  We need a structure to hold all the arguments.

<<Structure>>=
typedef struct vision_args {
  const double *ty; // time and state variables
  scm_t_array_handle *ty_handle;  // an array handle
  int m; // number of objects
  int n; // number of sensors
  double d; //agent diameter
  double r; // object radius
  double D; // max distance
  double Theta; // total angle of vision
  double max_output;
  gsl_matrix **R; // Rotation matrices for each sensor.
  void (*sight_listener)(double x1, double y1, double x2, double y2, struct vision_args* vargs);
  void *user;
} vision_args;
@

<<Function>>=
void setup_vision_args(struct vision_args *args) 
{
  args->ty_handle = malloc(sizeof(scm_t_array_handle));
  double theta_1 =  M_PI_2 + args->Theta / 2.;
  double delta_theta = -args->Theta / (args->n - 1);
  if (args->R == NULL) {
    args->R = malloc(args->n * sizeof(gsl_matrix *));
    for (int i = 0; i < args->n; i++) {
      double theta_i = i * delta_theta + theta_1;
      args->R[i] = gsl_matrix_alloc(2, 2);
      <<Setup rotation matrix.>>
    }
  }
}
@ 

<<Function>>=
void teardown_vision_args(struct vision_args *args) 
{
  if (args->R != NULL) {
    for (int i = 0; i < args->n; i++) {
      gsl_matrix_free(args->R[i]);
    }
    free(args->R);
    args->R = NULL;
  }
  if (args->ty_handle) {
    scm_array_handle_release(args->ty_handle);
    free(args->ty_handle);
    args->ty_handle = NULL;
  }
}
@ 

<<Function>>=
void teardown_ctrnn_params(ctrnn_params *params) 
{
  if (params) {
    // Maybe I shouldn't be freeing this.
    /* if (params->user) { */
    /*   teardown_vision_args(params->user); */
    /*   free(params->user); */
    /*   params->user = NULL; */
    /* } */
    free(params);
  }
}
@ 


This rotation matrix will rotate a 2D vector by a positive $\theta_i$
clockwise, and a negative $\theta_i$ counter-clockwise.  (I believe
this is in direction opposition to how it was done in the Scheme code.
Oops.)

\begin{align}
  R_i &= \begin{bmatrix}
       cos(\theta_i) & -sin(\theta_i) \\
       sin(\theta_i) & cos(\theta_i) \\
       \end{bmatrix}
\end{align}

<<Setup rotation matrix.>>=
    double c = cos(theta_i);
    double s = sin(theta_i);
// Column 1
    gsl_matrix_set(args->R[i], 0, 0, c);
    gsl_matrix_set(args->R[i], 1, 0, s);
// Column 2
    gsl_matrix_set(args->R[i], 0, 1, -s);
    gsl_matrix_set(args->R[i], 1, 1, c);
@ 

<<Function>>=
int vision_input (double t, int i, void *context, double *output)
{
  if (! context)
    return 3;
  if (! output)
    return 4;

  struct ctrnn_params *params = (struct ctrnn_params *) context;
  if (! params->user)
    return 5;
  struct vision_args* args = (struct vision_args *) params->user;
  if (i >= args->n) {
    // Only the first n nodes are sensors.
    *output = 0.;
    return 0;
  }
  if (i >= params->n) {
    // Error: More input requested than nodes are available.
    return 2;
  }

  int err;
  double min_distance = args->D;
  for (int j = 1; j <= args->m; j++) {
    double distance;
    double x3, y3;
    <<$distance \set $ distance between sensor i and object j.>>
    if (! err && min_distance > distance) {
      min_distance = distance;
    }
  }
  if (args->sight_listener) {
    double xc, yc; /* Closest object position (xc, yc). */
    // Set xc and yc to the minimum distance point.
    <<Compute $(x_c, y_c) \set R \, (min_distance, 0)$>>
    // Add the sensor position.
    <<Compute $(x_c, y_c) \set (x_c, y_c) + (x_0, y_0)$>>
    args->sight_listener(OBJECT_X(args->ty, 0), OBJECT_Y(args->ty, 0), xc, yc, args);
  }
  <<Normalize by [[max_output]].>>
  *output = min_distance;
  return 0;
}
@ 

The output of [[vision_input]] is used by a CTRNN, so we want to
rescale it from $[0, max_distance]$ to $[0, max_output]$.

<<Normalize by [[max_output]].>>=
min_distance *= args->max_output/args->D;
@ 

We want to set $(x_c, y_c)$ to the maximum distance.
<<Compute $(x_c, y_c) \set R \, (min_distance, 0)$>>=
static gsl_vector* pc = NULL, *pcp;
if (pc == NULL) {
  pc = gsl_vector_alloc(2);
  pcp = gsl_vector_alloc(2);
}
gsl_vector_set(pcp, 0, min_distance);
assert(min_distance > 0.);
gsl_vector_set(pcp, 1, 0.);
err = gsl_blas_dgemv (CblasNoTrans, 1.0, args->R[i], pcp, 0.0, pc);
if (err != GSL_SUCCESS) return GSL_EBADFUNC;
@

Add the sensor position.
<<Compute $(x_c, y_c) \set (x_c, y_c) + (x_0, y_0)$>>=
static gsl_vector* p0 = NULL;
if (p0 == NULL) 
  p0 = gsl_vector_alloc(2);
gsl_vector_set(p0, 0, OBJECT_X(args->ty, 0));
gsl_vector_set(p0, 1, OBJECT_Y(args->ty, 0));
err = gsl_blas_daxpy(1.0, p0, pc);
if (err != GSL_SUCCESS) return GSL_EBADFUNC;
xc = gsl_vector_get(pc, 0);
yc = gsl_vector_get(pc, 1);
@


<<Macro>>=
#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))
@ 

<<$distance \set $ distance between sensor i and object j.>>=
err = intersection_with_circle(
                                   OBJECT_X(args->ty, 0),
                                   OBJECT_Y(args->ty, 0),
                                   args->R[i],
                                   OBJECT_X(args->ty, j),
                                   OBJECT_Y(args->ty, j),
                                   args->r,
                                   &x3, &y3);
// Look at the distance between agent and object.
double xr = x3 - OBJECT_X(args->ty, 0);
double yr = y3 - OBJECT_Y(args->ty, 0);

distance = sqrt(xr * xr + yr * yr) - args->d/2.0;
@

<<Macro>>=
#define OBJECT_X(ty, i) ty[2 * i + 1]
#define OBJECT_Y(ty, i) ty[2 * i + 2]
@ 

<<Function>>=
int intersection_with_circle_specific (double x2, double y2, double r, double *result)
{
  if (x2 < 0 || fabs(y2) > r)
    return 1; // We're not touching the circle.
  else {
    double a = sqrt(r * r - y2 * y2);
    *result = x2 - a;
    return 0; // Success. No error.
  }
}
@ 

<<Function>>=
int intersection_with_circle(double x1, double y1, 
                             gsl_matrix * R, 
                             double x2, double y2, 
                             double r, 
                             double  *x3, double *y3)
{
  static gsl_vector* p1 = NULL, *p2p, *p2, *p3;
  if (p1 == NULL) { 
    p1 = gsl_vector_alloc(2);
    p2 = gsl_vector_alloc(2);
    p2p = gsl_vector_alloc(2);
    p3 = gsl_vector_alloc(2);
  }
  gsl_vector_set(p1, 0, x1);
  gsl_vector_set(p1, 1, y1);

  gsl_vector_set(p2, 0, x2);
  assert(gsl_vector_get(p2, 0) == x2);
  gsl_vector_set(p2, 1, y2);
  assert(gsl_vector_get(p2, 1) == y2);
  // GDB tip: print *p2->data@2 to see the contents of the gsl vector.
  //assert(0);

  int err;
  // FIXME Can't use $p_2'$ in the noweb fragment name. :( 
  <<Compute $p_2^* \set R^T\ (p_2 - p_1)$.>>
  err = intersection_with_circle_specific(gsl_vector_get(p2p, 0),
                                          gsl_vector_get(p2p, 1),
                                          r, 
                                          x3);
  if (err)
    return err;
  else {
    gsl_vector_set(p3, 0, *x3);
    gsl_vector_set(p3, 1, 0.);
    <<Compute $p_1 \set R^T\ p_3 + p_1$.>>
    *x3 = gsl_vector_get(p1, 0);
    *y3 = gsl_vector_get(p1, 1);
    return 0;
  }
}
@ 

<<Compute $p_2^* \set R^T\ (p_2 - p_1)$.>>=
  /* err = gsl_blas_dcopy(p2, p2p); */
  /* assert(err == 0); */
  /* if (err != GSL_SUCCESS) return GSL_EBADFUNC; */
  err = gsl_blas_daxpy(-1.0, p1, p2);
  assert(err == 0);
  if (err != GSL_SUCCESS) return GSL_EBADFUNC;
  // You cannot use x <- R x. It will destroy everything.
  err = gsl_blas_dgemv (CblasTrans, 1.0, R, p2, 0.0, p2p);
  assert(err == 0);
  if (err != GSL_SUCCESS) return GSL_EBADFUNC;
@

<<Compute $p_1 \set R^T\ p_3 + p_1$.>>=
err = gsl_blas_dgemv (CblasTrans, 1.0, R, p3, 1.0, p1);
if (err != GSL_SUCCESS) return GSL_EBADFUNC;
/* err = gsl_blas_daxpy(1.0, p1, p3); */
/* if (err != GSL_SUCCESS) return GSL_EBADFUNC; */
@

<<Procedure>>=
(define (sight-listener->pointer proc)
  (let ((wrapped (lambda (x1 y1 x2 y2 vargs)
                   (let ((p1 (vector x1 y1))
                         (p2 (vector x2 y2)))
                     (proc p1 p2)))))
    (procedure->pointer void wrapped (list double double double double '*))))
@ 

<<Function>>=
void call_scm_sight_listener_func(double x1, double y1, double x2, double y2, struct vision_args* vargs)
{
  SCM p1 = scm_c_make_vector(2, SCM_BOOL_F);
  SCM p2 = scm_c_make_vector(2, SCM_BOOL_F);
  scm_c_vector_set_x(p1, 0, scm_from_double(x1));
  scm_c_vector_set_x(p1, 1, scm_from_double(y1));

  scm_c_vector_set_x(p2, 0, scm_from_double(x2));
  scm_c_vector_set_x(p2, 1, scm_from_double(y2));

  SCM res = scm_call_2((SCM) vargs->user, p1, p2);
  (void) res;
}
@ 

<<Initialize>>=
void init_vision(void)
{
#ifndef SCM_MAGIC_SNARFER 
#include "vision.c.x" 
#endif
}
@


\subsection{Testing the C Implementation}

Let's write a simple test in C that exercises this functionality.
<<file:vision-test.c>>=
#include "vision.h"
#include "math.h"

int main(int argc, char **argv)
{
    struct vision_args vargs;
    double ty[] = {0., 1., 2., 3., 4.};
    vargs.ty = ty;
    vargs.ty_handle = NULL;
    vargs.m = 2;
    vargs.n = 9;
    vargs.d = 0.,
    vargs.r = 13.,
    vargs.D = 205.,
    vargs.Theta = M_PI / 6.;
    vargs.max_output =  10.;
    vargs.R = NULL;
    setup_vision_args(&vargs);

  ctrnn_params cparams;
  cparams.n = 1;
  double zeros[] = {0.};
  double ones[] = {1.};
  cparams.weights = zeros;
  cparams.time_constant = zeros;
  cparams.bias = zeros;
  cparams.gain = ones;
  cparams.user = &vargs;

  double output;
  int err = 0;
  for (int i = 0; i < cparams.n; i++) {
    err += vision_input(0., i, &cparams, &output);
  }
  teardown_vision_args(&vargs);
  return err;
}
@ 

The above test only checks that the code works.  It doesn't check for
comformity with the Scheme implementation.  We can run the same tests
on the C implementation by exposing a Scheme procedure to the C
function.

<<Function>>=
SCM_DEFINE (scm_c_vision_input, "c-vision-input", 9, 1, 0,
            (/* We can only have 10 parameters so the two parameters 
                t and i have been replaced by (t . i). */
              SCM tAndI,
             /* parameters */
             SCM ty, SCM m, SCM n, SCM d, SCM r, 
             SCM D,  SCM Theta, SCM max_output, SCM sight_listener),
            "Returns the output for sensor i at time t.")
{
  struct ctrnn_params cparams;
  struct vision_args vargs;
  SCM t = scm_car(tAndI);
  SCM i = scm_cdr(tAndI);
  
  GET_DOUBLE_HANDLE(ty, ty_array);
  vargs.ty = ty_array;
  vargs.m = scm_to_int(m);
  vargs.n = scm_to_int(n);
  vargs.d = scm_to_double(d);
  vargs.r = scm_to_double(r);
  vargs.D = scm_to_double(D);
  vargs.Theta = scm_to_double(Theta);
  vargs.max_output = scm_to_double(max_output);
  vargs.R = NULL;
  if (SCM_UNBNDP(sight_listener)) {
    vargs.sight_listener = NULL;
    vargs.user = NULL;
  } else if (scm_is_true(scm_procedure_p(sight_listener))) {
    vargs.sight_listener = call_scm_sight_listener_func;
    vargs.user = sight_listener;
  } else {
    // Expect nothing or a procedure.
    scm_throw(C_STRING_TO_SYMBOL("invalid-sight-listener-arg"), SCM_EOL);
  }
  setup_vision_args(&vargs); 
  cparams.input = vision_input; // C vision implementation.
  cparams.user = &vargs;
  cparams.n = 2 * vargs.n; // Nodes = sensors + 1.
  double output;
  int err = vision_input(scm_to_double(t), scm_to_int(i), &cparams, &output);
  teardown_vision_args(&vargs);
  RELEASE_HANDLE(ty);
  if (err)
    scm_throw(C_STRING_TO_SYMBOL("c-vision-input-error"), scm_list_1(scm_from_int(err)));
  else
    return scm_from_double(output);
}

<<Setup Scheme function pointer.>>
@ 

One thing we want to do is allow Scheme to use access the C function easily.  

<<Setup Scheme function pointer.>>=
SCM_GLOBAL_VARIABLE_INIT (scm_vision_input_pointer, "vision-input-pointer", scm_from_pointer(vision_input, NULL));
@

Now we need to a procedure that will create a [[void * context]] for
the C function.

<<Function>>=
SCM_DEFINE (scm_make_c_vision_context, "make-c-vision-context", 8, 1, 0,
            (/* parameters */
             SCM ty, SCM m, SCM n, SCM d, SCM r, 
             SCM D,  SCM Theta, SCM max_output, SCM sight_listener),
            "Returns a context pointer.")
{
  struct vision_args* vargs = malloc (sizeof (struct vision_args));
  vargs->m = scm_to_int(m);
  vargs->n = scm_to_int(n);
  vargs->d = scm_to_double(d);
  vargs->r = scm_to_double(r);
  vargs->D = scm_to_double(D);
  vargs->Theta = scm_to_double(Theta);
  vargs->max_output = scm_to_double(max_output);
  vargs->R = NULL;
  if (SCM_UNBNDP(sight_listener)) {
    vargs->sight_listener = NULL;
    vargs->user = NULL;
  } else if (scm_is_true(scm_procedure_p(sight_listener))) {
    vargs->sight_listener = call_scm_sight_listener_func;
    vargs->user = sight_listener;
  } else {
    // Expect nothing or a procedure.
    scm_throw(C_STRING_TO_SYMBOL("invalid-sight-listener-arg"), SCM_EOL);
  }
  setup_vision_args(vargs); 
  scm_array_get_handle(ty, vargs->ty_handle);
  vargs->ty = scm_array_handle_f64_writable_elements(vargs->ty_handle);  

  return scm_from_pointer(vargs, ( void (*)(void*) )teardown_vision_args);
}
@ 

<<Function>>=
SCM_DEFINE (scm_wrap_dummy_ctrnn_params, "wrap-dummy-ctrnn-params", 1, 0, 0,
            (/* parameters */
             SCM vision_context_pointer),
            "Wraps a vision context pointer.")
{
  ctrnn_params* params = malloc(sizeof (struct ctrnn_params));;

  vision_args *vargs = (vision_args *) scm_to_pointer(vision_context_pointer);
  params->user = vargs;
  params->n = vargs->n + 1;
  return scm_from_pointer(params, ( void (*)(void*) )teardown_ctrnn_params);
}
@ 


<<Procedure>>=
(define (make-c-vision-input ty . args)
  (lambda (t i)
   (apply (@@ (minimal-cognition ctrnn) c-vision-input) (cons t i) (list->typed-array 'f64 (list (vector-length ty)) (vector->list ty)) args)))
@ 

<<Procedure>>=
(define (make-c-vision-input-unified ty . args)
  (let* ((proc (make-unified-procedure int vision-input-pointer
                                    (list double int '* '*)))
         (context (apply make-c-vision-context (list->typed-array 'f64 (list (vector-length ty)) (vector->list ty)) args))
         (wrapped-context (wrap-dummy-ctrnn-params context))
        )
    (lambda (t i)
      (let ((bv (make-bytevector (sizeof double)))  ;; need to return a float.
            (err 0))
        
        (set! err 
              #;(proc t i %null-pointer %null-pointer)
              (proc t i wrapped-context (bytevector->pointer bv)))
        (if (not (= err 0))
            (throw 'vision-input-error err))
        (bytevector-ieee-double-ref bv 0 (native-endianness))))))
@ 

\subsection{Test}
<<file:vision-test.scm>>=
;; vision-test.scm
(use-modules (minimal-cognition vision)
             ((float-equality) #:renamer (symbol-prefix-proc 'fe:))
             (emacsy util)
             (srfi srfi-98)
             (minimal-cognition unified-procedure)
             )
(eval-when (compile load eval)
           ;; Some trickery so we can test private procedures.
           (module-use! (current-module) (resolve-module '(minimal-cognition vision))))

<<+ Test Preamble>>
<<test>>
<<+ Test Postscript>>
@
