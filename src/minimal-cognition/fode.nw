% fode.nw
\section{First Order Dynamics}

Beer uses a first order dynamics for his simulation.  This means there
is no momentum.

\begin{align*}
  \dot{x_1} &= k_{11}(E_1 - E_2) \\
  \dot{y_1} &= 0 \\
  \dot{x_2} &= k_{21} \\
  \dot{y_2} &= k_{22} \\
  &\mathrel{\makebox[\widthof{=}]{\vdots}} \\
  \dot{x_n} &= k_{n1} \\
  \dot{y_n} &= k_{n2} 
\end{align*}

\noindent The effectors $E_1$ and $E_2$ are controlled by the CTRNN.
The agent's position is determined by $x_1$.  There are $n - 1$
objects that are falling, excluding the agent, and $n$ objects total.  

<<file:fode.h>>=
typedef struct fode_params {
  int n;
  const double *k;
  // XXX Consider changing this to a zero-based index.
  /* The effector function is called with with args (t, 1, params) and 
     (t, 2, params). */
  double (*effector)(double t, int i, void *context);
  void * user;
} fode_params;

void init_fode (void);
@ 

<<Function>>=
int dot_fode(double t, const double *y, double *dydt, void *params)
{
  fode_params *pparams = (fode_params *) params;
  <<Compute $R \set K$.>>
  <<Compute $R_1 \set R_1 (E_1 - E_2)$.>>
  return GSL_SUCCESS;
}
@ 

<<Function>>=
int step_fode(double *ty, double h, fode_params *params)
{
  double *y = ty + 1;
  double *t = ty;
  gsl_odeiv2_system sys = {&dot_fode, 
                           NULL, 
                           params->n * 2, 
                           params};
  gsl_odeiv2_driver * d = 
         gsl_odeiv2_driver_alloc_y_new (&sys, gsl_odeiv2_step_rk2,
                                              //gsl_odeiv2_step_rkf45,
                                        h, 
                                        1e-1, 
                                        1e-1);

  //int status = gsl_odeiv2_driver_apply (d, t, *t + h, y);
  
  int status = gsl_odeiv2_driver_apply_fixed_step (d, t, h, 1, y);
     
  gsl_odeiv2_driver_free (d);
  return status;
}
@ 

\subsection{Scheme}

<<Primitive>>=
SCM_DEFINE (scm_step_fode, "step-fode*", 6, 0, 0,
            (SCM ty, SCM h, SCM step_count, SCM n, SCM k, SCM effector_func),
            "Move fode forward a single time step.")
{

  GET_DOUBLE_HANDLE(ty, ty_array);
  GET_READ_DOUBLE_HANDLE(k, k_array);

  fode_params params;
  params.n = scm_to_int(n);
  params.k = k_array;
  SCM scm_effector_pointer = SCM_BOOL_F;
  if (scm_is_bool(effector_func) && scm_is_false(effector_func)) {
    params.effector = NULL;
    params.user = NULL;
  } else if (scm_is_true(scm_unified_procedure_p (effector_func))) {
    scm_effector_pointer = scm_unified_c_function_pointer(effector_func);
    params.effector = scm_to_pointer(scm_effector_pointer);
    SCM default_values = scm_unified_default_values(effector_func);
    if (scm_is_true(scm_vector_p(default_values))) {
      SCM entry = scm_c_vector_ref(default_values, 2);
      if (scm_is_true(scm_pointer_p(entry)))
        params.user = scm_to_pointer(entry);
    }
  } else if (scm_is_true(scm_procedure_p(effector_func))) {
    params.effector = call_scm_effector_func;
    params.user = effector_func;
  } else {
    scm_throw(C_STRING_TO_SYMBOL("invalid-effector"), scm_list_1(effector_func));
    return SCM_BOOL_F;
  } 
  int count = scm_to_int(step_count);

  int err = 0;
  for (int i = 0; i < count && ! err; i++) {
    err = step_fode(ty_array, scm_to_double(h), &params);
  }

  scm_remember_upto_here_1 (scm_effector_pointer);

  RELEASE_HANDLE(ty);
  RELEASE_HANDLE(k);
  return err == 0 ? SCM_BOOL_T : SCM_BOOL_F;
}
@ 

<<Function>>=
double call_scm_effector_func(double t, int i, void *context)
{
  struct fode_params *params = (struct fode_params *) context;
  SCM res = scm_call_2((SCM) params->user, scm_from_double(t), scm_from_int(i));
  double result =  scm_to_double(res);
  return result;
}
@ 

<<file:fode.scm>>=
(define-module (minimal-cognition fode)
 #:use-module (ice-9 optargs)
 #:use-module (oop goops)
 #:use-module (infix)
 #:export (c-ctrnn-effector))

;; This can erroneously report a "file not found" error when
;; there is a symbol missing.
(load-extension "libguile-fode" "init_fode")

<<Procedure>>
@


<<Procedure>>=
(define*-public (make-fode n #:optional (effector-func #f))
  (list
   n
   (make-typed-array 'f64 1.0 (* 2 n))
   effector-func))
@ 

<<Procedure>>=
(define-public (make-fode-state fode)
  (make-typed-array 'f64 0.0 (1+ (* 2 (car fode))))
)
@ 

<<Procedure>>=
(define*-public (step-fode yt h fode #:optional (count 1))
  (apply step-fode*
         yt
         h
         count
         fode))
@ 

Let's be sane and made some accessors for these parameter and state objects.

<<Procedure>>=
(define (object-vx-ref k i)
  "Return the x coordinate of object i."
  (: k @ (2 * i)))

(define (object-vx-set! k i v)
  "Return the x coordinate of object i."
  (: k @ (2 * i) := v))

(define (object-vy-ref k i)
  "Return the x coordinate of object i."
  (: k @ ((2 * i) + 1)))

(define (object-vy-set! k i v)
  "Return the x coordinate of object i."
  (: k @ ((2 * i) + 1) := v))

(define-public object-vx (make-procedure-with-setter object-vx-ref object-vx-set!))
(define-public object-vy (make-procedure-with-setter object-vy-ref object-vy-set!))
@

<<Procedure>>=

(define-public (fode-time ty)
  (: ty @ 0))

(define-public (fode-time-set! ty t)
  (: ty @ 0 := t))

(define (object-x-ref ty i)
"Return the x coordinate of object i."
  (: ty @ ((2 * i) + 1)))

(define (object-x-set! ty i v)
"Set the x coordinate of object i to v."
  (: ty @ ((2 * i) + 1) := v))

(define (object-y-ref ty i)
"Return the y coordinate of object i."
 (: ty @ ((2 * i) + 2)))

(define (object-y-set! ty i v)
"Set the y coordinate of object i to v."        
(: ty @ ((2 * i) + 2) := v))

(define-public object-x (make-procedure-with-setter object-x-ref object-x-set!))
(define-public object-y (make-procedure-with-setter object-y-ref object-y-set!))
@ 

<<test>>=
(check (procedure? step-fode) => #t)
(define yt #f64(0. 0. 0.))
(check (procedure-with-setter? object-y) => #t)
(check (object-y yt 0) => 0.)
(set! (object-y yt 0) 1.)
(check (object-y yt 0) => 1.)
(set! (object-y yt 0) 0.)
(define h 0.1)
(define p1 (make-fode 1))
(check (step-fode yt h p1) => #t)
(check yt => #f64(0.1 0.1 0.1))

(define (effector2 t i) (display "effector called!") (if (= i 1) 1. 0.))
(define p2 (make-fode 1 effector2))
(check (step-fode yt h p1) => #t)
(check yt => #f64(0.2 0.2 0.2))

@ 




\appendix
\section{Appendix}
\subsection{Miscellaneous}
<<Include GSL headers.>>=
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_odeiv2.h>
#include <gsl/gsl_blas.h>
@

\subsection{File Layout}
<<file:fode.c>>=
#include <libguile.h>
#ifndef SCM_MAGIC_SNARFER 
#include "fode.h"
#include "math.h"
<<Include GSL headers.>>
#include "unified-procedure.h"
#include "ctrnn.h" // We need some of the macros.  XXX split into util.h maybe.
#endif

<<Function>>

<<Primitive>>

<<Initialize>>
@ 


<<Compute $R \set K$.>>=
gsl_vector_view Rview = gsl_vector_view_array(dydt, pparams->n * 2);
gsl_vector* R = &Rview.vector;
gsl_vector_const_view K = gsl_vector_const_view_array(pparams->k, pparams->n * 2);
gsl_vector_memcpy(R, &K.vector);
@

<<Compute $R_1 \set R_1 (E_1 - E_2)$.>>=
if (pparams->effector) {
  gsl_vector_set(R, 0, 
                    gsl_vector_get(R, 0) 
                    * (pparams->effector(t, 1, pparams->user) 
                     - pparams->effector(t, 2, pparams->user)));
}/* else {
  gsl_vector_set(R, 0, 0.);        
}*/
@

Now we want to be able to drive a First Order Dynamics with a CTRNN.
We'll use a C function to do it.

<<Function>>=
double ctrnn_effector(double time, int i, void *context) {
  if (! context) {
    fprintf(stderr, "Got NULL for context in effector; returning 0..");
    return 0.;
  }
  double *ctrnn_state = (double *) context;
  int first_effector_index = 9 + 1; // sensor-count + 1
  return ctrnn_state[first_effector_index + i - 1];
}
@ 

<<Primitive>>=
SCM_GLOBAL_VARIABLE_INIT(scm_c_ctrnn_effector, "c-ctrnn-effector", scm_from_pointer(ctrnn_effector, NULL));
@ 

<<Initialize>>=
void init_fode(void)
{
#ifndef SCM_MAGIC_SNARFER 
#include "fode.c.x" 
#endif
}
@


\subsection{Test}
<<file:fode-test.scm>>=
;; fode-test.scm
(use-modules (minimal-cognition fode)
             (float-equality))
(eval-when (compile load eval)
           ;; Some trickery so we can test private procedures.
           (module-use! (current-module) (resolve-module '(minimal-cognition fode))))

<<+ Test Preamble>>
<<test>>
<<+ Test Postscript>>
@
