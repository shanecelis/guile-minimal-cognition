\section{Appendix}

\subsection{Miscellaneous}
<<Include GSL headers.>>=
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_odeiv2.h>
#include <gsl/gsl_blas.h>
@

\subsection{File Layout}
<<file:ctrnn.c>>=
#include <libguile.h>
#ifndef SCM_MAGIC_SNARFER 
#include "ctrnn.h"
#include "math.h"
<<Include GSL headers.>>
#include "unified-procedure.h"
#endif

/* private prototypes */
typedef double (*functor)(double f, int i, void* params);

void gsl_vector_map(functor f, gsl_vector *x, void *params);
double sigmoid(double x, int i, void * params);
double fill_input(double t, int i, void *cparams);
double invert(double x, int i, void * params);
double hadamard(double x, int i, void * params);
int call_scm_input_func(double t, int i, void *context, double *output);

<<Function>>

<<Primitive>>

<<Initialize>>
@ 

\subsection{Map and Functors}

<<Function>>=
void gsl_vector_map(functor f, gsl_vector *x, void *params)
{
  for (int i = 0; i < x->size; i++)
    gsl_vector_set(x, i, f(gsl_vector_get(x, i), i, params));
}

double sigmoid(double x, int i, void * params)
{ 
  (void) i;
  (void) params;
  return 1./(1. + exp(-x));
}

double invert(double x, int i, void * params)
{
  (void) i;
  (void) params;
  return 1./x;
}

double hadamard(double x, int i, void * params)
{
  gsl_vector *v = (gsl_vector *)params;
  return x*gsl_vector_get(v, i);
}
@

This is a
\href{http://www.gnu.org/software/gsl/manual/html_node/Level-2-GSL-BLAS-Interface.html}{level
  2 GSL BLAS operation} and we need to
\href{http://www.gnu.org/software/gsl/manual/html_node/Matrix-views.html}{make
  a matrix view} and a
\href{http://www.gnu.org/software/gsl/manual/html_node/Vector-views.html}{vector
  view}.

\begin{align}
  R \set& W\, Y - \Theta
\end{align}

<<Compute $R \set W \, Y - \Theta$.>>=
gsl_vector_memcpy(R, &B.vector);
int err = gsl_blas_dgemv (CblasNoTrans, 1.0, &W.matrix, &Y.vector, -1.0, R);
if (err != GSL_SUCCESS) return GSL_EBADFUNC;
@ 

<<Compute $R \set W \, R$.>>=
int err = gsl_blas_dcopy(R, temp); 
if (err != GSL_SUCCESS) return GSL_EBADFUNC;
err = gsl_blas_dgemv (CblasNoTrans, 1.0, &W.matrix, temp, 0.0, R);
if (err != GSL_SUCCESS) return GSL_EBADFUNC;
@ 


<<Setup matrices.>>=
gsl_matrix_const_view W = gsl_matrix_const_view_array(cparams->weights, cparams->n, cparams->n);
gsl_vector_const_view B = gsl_vector_const_view_array(cparams->bias, cparams->n); // $\Theta$
gsl_vector_const_view Y = gsl_vector_const_view_array(y, cparams->n);
gsl_vector_view Rview = gsl_vector_view_array(dydt, cparams->n);//gsl_vector_alloc(cparams->n);
gsl_vector* R = &Rview.vector;
gsl_vector* temp = gsl_vector_alloc(cparams->n); // Just a temp variable
@ 

<<Teardown matrices.>>=
gsl_vector_free(temp);
@

<<Compute $R \set \Sigma(R)$.>>=
gsl_vector_map(sigmoid, R, NULL);
@
\subsection{Linear Algebra Computations}
This is a
\href{http://www.gnu.org/software/gsl/manual/html_node/Level-1-GSL-BLAS-Interface.html}{level
  1 BLAS operation}.  This API computes $y \set \alpha x + y$.
<<API>>= 
int gsl_blas_daxpy (double alpha, const gsl_vector * x, gsl_vector * y)
@ 
<<Compute $R \set R - Y$.>>=
gsl_blas_daxpy(-1.0, &Y.vector, R);
@

<<Compute $R \set R + I(t)$.>>=
gsl_vector* I = gsl_vector_alloc(cparams->n);
gsl_vector_set_all(I, t);
gsl_vector_map(fill_input, I, cparams);
gsl_blas_daxpy(1.0, I, R);
gsl_vector_free(I);
@

<<Compute $R \set R \circ T^{-1}$.>>=
gsl_vector_const_view T = gsl_vector_const_view_array(cparams->time_constant, cparams->n);
gsl_vector* Tinv = gsl_vector_alloc(cparams->n);
gsl_vector_memcpy(Tinv, &T.vector);
gsl_vector_map(invert, Tinv, NULL);
gsl_vector_map(hadamard, R, Tinv);
gsl_vector_free(Tinv);
@

<<Compute $R \set Y + \Theta$.>>=
gsl_vector_memcpy(R, &B.vector);
gsl_blas_daxpy(1.0, &Y.vector, R);
@

<<Compute $R \set G \circ R$.>>=
gsl_vector_const_view G = gsl_vector_const_view_array(cparams->gain, cparams->n);
gsl_vector_map(hadamard, R, (void *) &G.vector);
@

<<Function>>=
double fill_input(double t, int i, void *params)
{
  ctrnn_params *cparams = (ctrnn_params *) params;
  double output;
  int err;
  if (cparams->input) {
     err = cparams->input(t, i, (void *)cparams, &output);
     if (err) {
       fprintf(stderr, "error: fill_input had an error %d\n", err);
     }
     return output;
  } else
    return 0.;
}
@ 
\subsection{Test}
<<file:ctrnn-test.scm>>=
;; ctrnn-test.scm
(use-modules (check)
             (minimal-cognition ctrnn)
             (float-equality))

(eval-when (compile load eval)
           ;; Some trickery so we can test private procedures.
           (module-use! (current-module) (resolve-module '(minimal-cognition ctrnn))))

<<test>>
(check-exit)
@

<<file:ctrnn-test.c>>=
#include "ctrnn.h"
//#include <tap/basic.h>
#include <stdio.h>

int main(int argc, char **argv) {
    (void) argc;
    (void) argv;
    //plan(1)
    double gain = 1.0;
    double bias = 1.0;
    double weights = 1.0;
    double time_constant = 1.0;
    double yt[] = {0.0, 1.0};
    ctrnn_params params = {1, &weights, &time_constant, &bias, &gain, NULL, NULL};
    step_ctrnn(yt, 0.01, &params);
    //ok(1, "first test");
    printf("1..1\nok 1 - hi\n");
    return 0;
}
@ 

<<Weird testing.>>=
/* why is this not working. */
@
